import os
from flask import Flask, render_template, request
import joblib
import pefile
import pickle

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'C:/Users/Admin/KTLT_Hocmay/Chuyendecoso/uploads'
app.config['ALLOWED_EXTENSIONS'] = {'exe', 'dll', 'sys', 'ocx', 'scr'}

classifier = joblib.load('C:/Users/Admin/KTLT_Hocmay/Chuyendecoso/classifier/classifier.pkl')
with open('C:/Users/Admin/KTLT_Hocmay/Chuyendecoso/classifier/features.pkl', 'rb') as file:
    features = pickle.load(file)

label_mapping = {
    1: 'Adware',
    2: 'Backdoor',
    3: 'Trojan',
    4: 'Worm',
    5: 'Virus',
    6: 'Generic',
    7: 'Unclassified',
    0: 'Filesafe'
}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/classify', methods=['POST'])
def classify():
    if 'file' not in request.files:
        return render_template('index.html', error='Không chọn được file')

    file = request.files['file']

    if file.filename == '':
        return render_template('index.html', error='Không chọn được file')

    if file and allowed_file(file.filename):
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(file_path)

        features = extract_features(file_path)
        if features is not None:
            predicted_label_id = classifier.predict([features])[0]
            predicted_label = label_mapping.get(predicted_label_id, 'Unknown')
            return render_template('result.html', prediction=predicted_label)
        else:
            return render_template('result.html', error='File không thể phân loại')
    else:
        return render_template('index.html', error='File không thuộc định dạng của pefile')

def extract_features(file_path):
    try:
        pe = pefile.PE(file_path)
        a = str(pe.OPTIONAL_HEADER.AddressOfEntryPoint)
        b = str(pe.OPTIONAL_HEADER.MajorLinkerVersion)
        c = str(pe.OPTIONAL_HEADER.MajorImageVersion)
        d = str(pe.OPTIONAL_HEADER.MajorOperatingSystemVersion)
        e = str(pe.OPTIONAL_HEADER.DllCharacteristics)
        f = str(pe.OPTIONAL_HEADER.SizeOfStackReserve)
        g = str(pe.FILE_HEADER.NumberOfSections)
        h = str(pe.OPTIONAL_HEADER.DATA_DIRECTORY[2].Size)
        features = [a, b, c, d, e, f, g, h]
        return features
    except:
        return None

if __name__ == '__main__':
    app.run(debug=True)